---
- name: SSH Key Setup
  hosts: fresh_systems
  gather_facts: false  # Setting to false because we are doing the OS check manually
  
  tasks:
    - name: Check if system is Debian/Ubuntu
      command: cat /etc/os-release
      register: os_release
      changed_when: false

    - set_fact:
        is_debian_or_ubuntu: "{{ 'ID=debian' in os_release.stdout or 'ID=ubuntu' in os_release.stdout }}"
    - set_fact:
        is_rhel: "{{ 'ID=rhel' in os_release.stdout }}"

    - name: Check if ssh key exists on control machine
      stat:
        path: "~/.ssh/id_rsa"
      delegate_to: localhost
      register: ssh_key_check

    - name: Generate SSH key on control machine if it doesn't exist
      command: ssh-keygen -f ~/.ssh/id_rsa -N ""
      when: not ssh_key_check.stat.exists
      delegate_to: localhost

    - name: Install sshpass for password-based SSH setup (Debian/Ubuntu)
      apt:
        name: sshpass
        state: present
      when: is_debian_or_ubuntu
      delegate_to: localhost

    - name: Install sshpass for password-based SSH setup (RHEL)
      yum:
        name: sshpass
        state: present
      when: is_rhel
      delegate_to: localhost

    - name: Fetch the generated/public SSH key from control machine
      slurp:
        src: "~/.ssh/id_rsa.pub"
      delegate_to: localhost
      register: ssh_key_content

    - name: Add the SSH key to the remote hosts
      authorized_key:
        user: "{{ ansible_user }}"
        state: present
        key: "{{ ssh_key_content['content'] | b64decode }}"

    - name: Get existing public keys from target systems
      command: cat ~/.ssh/authorized_keys
      register: existing_keys
      ignore_errors: true

    - name: Get parent directory of the playbook
      set_fact:
        parent_dir: "{{ playbook_dir | regex_replace('/[^/]+$', '') }}"

    - name: Ensure discovered_ssh_keys directory exists on control machine
      file:
        path: "{{ parent_dir }}/discovered_ssh_keys"
        state: directory
      delegate_to: localhost

    - name: Store the list of keys for each host
      copy:
        content: "{{ existing_keys.stdout }}"
        dest: "{{ parent_dir }}/discovered_ssh_keys/{{ inventory_hostname }}_keys.txt"
      delegate_to: localhost

